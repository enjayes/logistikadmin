/**
 * dataController
 *
 *
 *
 *
 * @date 21.11.14 - 12:26
 *
 */

var nodemailer = require('nodemailer');


var Job = function (id) {
    this.id = id;
    this.termin_id = "";
    this.lieferanten_id = "";
    this.markt_id = "";
    this.timestamp_start = 0;
    this.timestamp_end = 0;
    this.fixtermin = 0;
    this.gespraechspartner = "";
    this.pending = true;
    this.finished = false;
    this.checked_out = false;
    this.template_name = "";
    this.besuch = false;
    this.bestellung = false;
    this.verraeumung = false;
    this.austausch = false;
    this.t_ziel = "";
    this.t_grund = "";
    this.t_thematik = "";
    this.cb_auftrag_getaetigt = false;//Auftrag getätigt
    this.cb_mhd = false;//MHD-Kontrolle
    this.cb_ruecknahme = false; //Rücknahme
    this.cb_reklamation = false; //Reklamationsbearbeitung
    this.cb_warenaufbau = false; //Warenaufbau
    this.cb_umbau = false; //Umbau
    this.cb_info_gespraech = false; //Info-Gespräch
    this.cb_nr_abgabe = false; //Nummer-Abgabe
    this.t_vk_euro_abgabe = "";
    this.t_warengruppe = "";
    this.cb_verkostung = false; //Verkostung
    this.cb_sortimentsinfo = false; //Sortimentsinfo
    this.cb_aktionsabsprache = false;
    this.cb_bemusterung = false; //Bemusterung
    this.cb_verlosung = false; //Verlosung
    this.t_notizen = "";
}

var Termin = function () {
    this.marktid = null;
    this.id = misc.getUniqueID();
    this.title = "";
    this.start = "";
    this.end = null;
    this.allDay = false;
    this.notizen = "";
    this.lieferant = "";
    this.repeatDays = 0;

}


dataController = {
    mysql: null,
    mysqlConnection: null,
    CryptoJS: null,
    momentJS: null,
    getUniqueID: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    },
    init: function (preferences, CryptoJS, momentJS) {

        //Load mysql
        this.mysql = require('mysql');
        //Connect to MySql database
        this.mysqlConnection = dataController.mysql.createConnection(preferences.mysql);
        this.mysqlConnection.connect(function (err) {
            if (err) {
                dataController.mysqlConnection.end();
                dataController.mysqlConnection = dataController.mysql.createConnection(preferences.alternative.mysql);
                dataController.mysqlConnection.connect(function (err) {
                    if (err) throw err;
                    console.log('Connected to MySql database (' + preferences.alternative.mysql.host + ')');
                });
            }
            else {
                console.log('Connected to MySql database (' + preferences.mysql.host + ')');
            }
        });


        this.CryptoJS = CryptoJS;
        this.momentJS = momentJS;

        dataController.updateData();

    },
    updateData: function () {
        //TODO
        //Strip Time
        var today = new Date();
        today = new Date(today.getFullYear(), today.getMonth(), today.getDate()).getTime();

        var start = today - 86400000 * 7; //definiert tage nachdem bei nicht wahrgenommenen terminen ein alarm generiert wird
        var end = today;

        //dataController.mysqlConnection.query('SELECT * FROM termine WHERE jobId =  "" AND alarm = 0 AND RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))   ', [start, end, end], function (err, rows, fields) {
        dataController.mysqlConnection.query('SELECT * FROM termine WHERE jobId =  "" AND alarm = 0 AND RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))   ', [start, end, end], function (err, rows, fields) {
            if (err)
                console.log("MYSQL ERROR: " + err);
            else {
                if (rows) {

                    if (rows && rows.length > 0) {

                        for (var i = 0; i < rows.length; i++) {

                            var sendAlarm = function (termin) {

                                dataController.mysqlConnection.query('SELECT * FROM lieferanten WHERE id =  ?', [termin.Lieferant], function (err, rowsLieferant, fields) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {

                                        dataController.mysqlConnection.query('SELECT * FROM maerkte WHERE id =  ?', [termin.marktId], function (err, rowsMarkt, fields) {
                                            if (err)
                                                console.log("MYSQL ERROR: " + err);
                                            else {

                                                if (rowsMarkt && rowsMarkt.length > 0)
                                                    var marktNameText = rowsMarkt[0].name;
                                                else
                                                    marktNameText = "Alarm";


                                                if (rowsLieferant && rowsLieferant.length > 0)
                                                    var lieferantNameText = " des Lieferanten \"" + rowsLieferant[0].Vorname + " " + rowsLieferant[0].Name + "\"";
                                                else
                                                    lieferantNameText = "";

                                                var terminStart = dataController.momentJS(termin.StartMilli).zone(termin.Start).locale("de").format('MMMM Do YYYY, hh:mm');

                                                var nachricht = {
                                                    id: dataController.getUniqueID(),
                                                    lieferantid: termin.Lieferant,
                                                    read: 0,
                                                    datum: (new Date()).getTime(),
                                                    nachricht: marktNameText + ": Der Termin \"" + termin.Title + "\"" + lieferantNameText + " wurde nicht wahrgenommen. (" + terminStart + ")"

                                                }

                                                //Setzte auf Alarm gesendet
                                                dataController.mysqlConnection.query("UPDATE termine SET alarm = 1 WHERE id = ? ", termin.id, function (err, result) {
                                                    if (err)
                                                        console.log("MYSQL ERROR: " + err);
                                                    else {

                                                    }
                                                });

                                                // Create Alarm message
                                                dataController.mysqlConnection.query("INSERT INTO lieferantnachrichtgesendet SET ? ", nachricht, function (err, result) {
                                                    if (err)
                                                        console.log("MYSQL ERROR: " + err);
                                                    else {

                                                    }
                                                });

                                                //Send Warning Email


                                                var emailTo = rowsMarkt[0].emails;
                                                if (emailTo && emailTo != "") {

                                                    // create reusable transporter object using SMTP transport
                                                    var transporter = nodemailer.createTransport({
                                                        service: 'Gmail',
                                                        auth: {
                                                            user: "edekalogistik@gmail.com",
                                                            pass: "edekabaisch"
                                                        }
                                                    });
                                                    // NB! No need to recreate the transporter object. You can use
                                                    // the same transporter object for all e-mails
                                                    // setup e-mail data with unicode symbols

                                                    console.log(emailTo)
                                                    emailTo = emailTo.replace(/(\r\n|\n|\r)/gm, ", ")
                                                    console.log(emailTo)

                                                    var mailOptions = {
                                                        from: 'edekalogistik@gmail.com', // sender address
                                                        to: emailTo, // list of receivers
                                                        subject: marktNameText + ": Termin " + termin.Title + " wurde nicht wahrgenommen", // Subject line
                                                        text: nachricht.nachricht, // plaintext body
                                                        html: nachricht.nachricht // html body
                                                    };

                                                    // send mail with defined transport object
                                                    transporter.sendMail(mailOptions, function (error, info) {
                                                        if (error) {
                                                            console.log(error);
                                                        } else {
                                                            console.log('Message sent: ' + info.response);
                                                        }
                                                    });
                                                }

                                            }
                                        })
                                    }
                                })
                            };

                            sendAlarm(rows[i])

                        }

                    }
                }
            }
        });

        setTimeout(dataController.updateData, 86400000 / 2)
    },
    handleMessage: function (clientController, client, data) {
        if (data.t) {
            console.log("Handle: Message " + data.t)

            if (data.t.substr(0, 1) == "l") {
                dataController.lieferant.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "t") {
                dataController.termin.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "n") {
                dataController.nachricht.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "a") {
                dataController.antwortNachricht.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "j") {
                dataController.job.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "m") {
                dataController.maerkte.handleMessage(clientController, client, data)

            } else if (data.t.substr(0, 1) == "s") {
                dataController.statistics.handleMessage(clientController, client, data)
            } else if (data.t.substr(0, 1) == "p") {
                dataController.phone.handleMessage(clientController, client, data)
            }
        }
        else {
            console.log("Handle: Unknown Message Type");
        }


    },

    lieferant: {
        messageType: {
            login: "ll",
            getNewPin: "lgnp",
            getAll: "lga",
            create: "lc",
            update: "lu",
            delete: "ld",
            get: "lg",
            updateOthers: "luo"
        },
        handleMessage: function (clientController, client, data) {
            var lieferant;
            console.log("handle: " + data.t);
            if (data.t == this.messageType.login) {

                dataController.mysqlConnection.query("SELECT * FROM lieferanten WHERE PinSHA = ? ", data.p, function (err, rows, fields) {

                    if (err) {
                        console.log("MYSQL ERROR: " + err);
                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: null});
                    }
                    else {
                        //Pin doesnt exists yet
                        if (rows && rows.length == 1) {
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: rows[0]});
                        } else
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: null});
                    }
                });


            } else if (data.t == this.messageType.getNewPin) {
                lieferant = data.l;
                if (lieferant) {

                    var generateNewPin = function () {

                        //Create Pin 4 digits
                        var pin = "" + (Math.floor(Math.random() * 9998) + 1);
                        var pad = "0000";
                        pin = pad.substring(0, pad.length - pin.length) + pin;

                        dataController.mysqlConnection.query("SELECT * FROM lieferanten WHERE Pin = ? ", pin, function (err, rows, fields) {

                            if (err)
                                console.log("MYSQL ERROR: " + err);
                            else {
                                //Pin doesnt exists yet
                                if (rows && rows.length == 0) {

                                    lieferant.Pin = pin;
                                    lieferant.PinSHA = "" + dataController.CryptoJS.SHA3("dfjo58443pggd9gudf9" + pin, { outputLength: 512 });

                                    dataController.mysqlConnection.query("UPDATE lieferanten SET ? WHERE id = ? ", [lieferant, lieferant.id], function (err, result) {
                                        if (err)
                                            console.log("MYSQL ERROR: " + err);
                                        else {

                                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: lieferant});

                                            dataController.lieferant.informOtherClients(clientController, client);

                                        }

                                    });

                                } else {
                                    generateNewPin();
                                }

                            }
                        });
                    }
                    generateNewPin();


                }

            }

            else if (data.t == this.messageType.getAll) {

                dataController.mysqlConnection.query('SELECT * FROM lieferanten', function (err, rows, fields) {

                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {

                        if (rows) {

                            var lieferanten = rows;
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: lieferanten});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysqlConnection.query('INSERT INTO lieferanten SET ?', lieferant, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.lieferant.informOtherClients(clientController, client);


                        }
                    });
                    if (appController.clients.length > 1) {
                        appController.clients.forEach(function (actClient) {

                            actClient.socket.emit('message', {t: "pl", l: lieferant});

                        });
                    }

                }

            } else if (data.t == this.messageType.update) {
                lieferant = data.l;

                if (lieferant) {

                    dataController.mysqlConnection.query("UPDATE lieferanten SET ? WHERE id = ? ", [lieferant, lieferant.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(clientController, client);

                        }

                    });
                    if (appController.clients.length > 0) {
                        console.log("pushLieferant to Clients!");
                        appController.clients.forEach(function (actClient) {
                            console.log("pushLieferant: " + actClient);
                            actClient.socket.emit('message', {t: "pl", l: lieferant});

                        });
                    }
                }

            } else if (data.t == this.messageType.delete) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysqlConnection.query('DELETE FROM lieferanten WHERE id = ?', lieferant.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(clientController, client);


                        }
                    });
                    if (appController.clients.length > 0) {
                        appController.clients.forEach(function (actClient) {

                            actClient.socket.emit('message', {t: "dl", l: lieferant});

                        });
                    }
                }
            }

        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 1) {

                //Send list of all Lieferanten to ohter clients
                dataController.mysqlConnection.query('SELECT * FROM lieferanten', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var lieferanten = rows;

                            var clients = clientController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {
                                actClient.socket.emit('message', {t: dataController.lieferant.messageType.updateOthers, l: lieferanten});
                            });

                        }
                    }
                });

            }

        }

    },
    termin: {
        messageType: {
            getRange: "tgr",
            create: "tc",
            update: "tu",
            delete: "td",
            get: "tg", //get by lieferanten.id
            updateOthers: "tuo",
            getAll: "tgA"

        },
        getRange: function (data, callback, job) {
            //Strip Time
            var today = new Date(data.today);
            today = new Date(today.getFullYear(), today.getMonth(), today.getDate());

            var start = data.start;
            var end = data.end;

            if (data.lid) {

                if (data.mid) {
                    var sqlQuery = 'SELECT * FROM termine WHERE ((repeat_id = "" AND RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))) OR (RepeatDays > 0))  AND Lieferant = ?  And marktId = ?';
                    var sqlVars = [start, end, end, data.lid, data.mid];
                }
                else {
                    sqlQuery = 'SELECT * FROM termine WHERE ((repeat_id = "" AND RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))) OR (RepeatDays > 0))  AND Lieferant = ?';
                    sqlVars = [start, end, end, data.lid];
                }
            }
            else {

                sqlQuery = 'SELECT * FROM termine WHERE (repeat_id = "" AND RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))) OR (RepeatDays > 0)';
                sqlVars = [start, end, end];
            }

            dataController.mysqlConnection.query(sqlQuery, sqlVars, function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    if (rows) {

                        var termine = [];

                        Date.prototype.yyyymmdd = function () {
                            var yyyy = this.getFullYear().toString();
                            var mm = (this.getMonth() + 1).toString(); // getMonth() is zero-based
                            var dd = this.getDate().toString();
                            return yyyy + "-" + (mm[1] ? mm : "0" + mm[0]) + "-" + (dd[1] ? dd : "0" + dd[0]); // padding
                        };

                        for (var i = 0; i < rows.length; i++) {

                            var event = rows[i];
                            if (event.RepeatDays > 0) {

                                start = start - 86400000 * 32;
                                end = end + 86400000 * 32;

                                for (var day = start; day <= end; day = day + 86400000) {

                                    var startDiff = event.StartMilli - day;

                                    if (startDiff > 0)
                                        startDiff = startDiff % (86400000 * event.RepeatDays);
                                    else {
                                        startDiff = startDiff - 86399999;
                                        startDiff = 86399999 + startDiff % (86400000 * event.RepeatDays);
                                    }
                                    if (startDiff >= 0 && startDiff < 86400000) {

                                        //Copy Event
                                        var repeatEvent = JSON.parse(JSON.stringify(event));

                                        var oldStartMilli = repeatEvent.StartMilli;
                                        repeatEvent.StartMilli = day + startDiff;
                                        repeatEvent.Start = dataController.momentJS(repeatEvent.StartMilli).zone(repeatEvent.Start).format();


                                        if (repeatEvent.EndMilli > 0) {
                                            var diffStartSource = repeatEvent.StartMilli - oldStartMilli;
                                            repeatEvent.EndMilli = repeatEvent.EndMilli + diffStartSource;
                                            repeatEvent.End = dataController.momentJS(repeatEvent.EndMilli).zone(repeatEvent.Start).format();
                                        }


                                        if (repeatEvent.RepeatStartingMilli - 86399999 <= repeatEvent.StartMilli && repeatEvent.StartingMilli < repeatEvent.StartMilli) //today <
                                            termine.push(repeatEvent);
                                    }


                                }

                            } else
                                termine.push(rows[i]);
                        }

                        callback(data, termine, job);

                    }
                }
            });
        },
        handleMessage: function (clientController, client, data) {

            var termin;

            if (data.t == this.messageType.getRange) {
                var newCallback = function (data, termine) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});

                };
                dataController.termin.getRange(data, newCallback, null);

            } else if (data.t == this.messageType.create) {

                termin = data.e;
                if (!termin.repeat_id) {
                    termin.repeat_id = "";
                }
                if (!termin.done) {
                    termin.done = 0;
                }
                if (termin) {
                    dataController.mysqlConnection.query('INSERT INTO termine SET ?', termin, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);

                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                termin = data.e;
                if (!termin.repeat_id) {
                    termin.repeat_id = "";
                }
                if (!termin.done) {
                    termin.done = 0;
                }
                if (termin) {
                    dataController.mysqlConnection.query("UPDATE termine SET ? WHERE id = ? ", [termin, termin.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                termin = data.e;
                if (termin) {
                    dataController.mysqlConnection.query('DELETE FROM termine WHERE id = ?', termin.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);
                        }
                    });
                }
            }
            else if (data.t == this.messageType.get) {
                console.log("Handle: Termin " + data.t + "by id");

                dataController.termin.getLieferantenTermine(data.lid, function (termine) {
                    console.log(termine);
                    console.log(data.callback);
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});

                })

            }

            else if (data.t == this.messageType.getAll) {
                console.log("switch: getMessage");

                dataController.termin.getTermine(data.marktid, function (termine) {
                    console.log("cbbb termine");
                    console.dir(termine);
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});

                })

            }
        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 0) {

                var clients = clientController.clients;
                /*
                 clientController.clients.filter(function (element) {
                 return (!client || element.socket != client.socket)
                 });
                 */
                clients.forEach(function (actClient) {
                    actClient.socket.emit('message', {t: dataController.termin.messageType.updateOthers});

                });


            }

        },
        getLieferantenTermine: function (lid, callback) {

            dataController.mysqlConnection.query('SELECT * FROM termine WHERE Lieferant = ?', lid, function (err, result) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    //funst

                    callback(result);
                }
            });
        },
        getTermine: function (marktid, callback) {

            dataController.mysqlConnection.query('SELECT * FROM termine WHERE marktId = ?', marktid, function (err, result) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    //funst
                    console.log("termine: getLieferantenTermine");
                    console.log(marktid);
                    console.dir(result);
                    callback(result);
                }
            });
        }


    },

    nachricht: {
        messageType: {
            getAll: "nga",
            create: "nc",
            delete: "nd",
            updateOthers: "nuo",
            markRead: "nm",
            get: "ng"

        },
        maxNachrichten: 1000,
        //Get all the Messages, joins messages and recipients
        getAllAdminNachrichten: function (callback, start, stop) {
            if (!callback)
                return;


            dataController.mysqlConnection.query('SELECT * FROM adminnachrichtgesendet ORDER BY datum DESC', function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {

                    if (rows) {

                        var length = rows.length;

                        rows = rows.slice(start, stop);

                        var getLieferanten = function (nachrichten, position) {

                            if (position == nachrichten.length)
                                callback([], 0);
                            else {

                                dataController.mysqlConnection.query('SELECT * FROM adminlieferantnachricht WHERE nachrichtenid = ?', nachrichten[position].id, function (err, rows, fields) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {
                                        if (rows) {
                                            nachrichten[position].lieferanten = [];
                                            for (var i = 0; i < rows.length; i++) {
                                                nachrichten[position].lieferanten.push({lieferantid: rows[i].lieferantid, read: rows[i].read == 1 ? true : false});

                                            }

                                            if (position == nachrichten.length - 1) {

                                                callback(nachrichten, length)
                                            }
                                            else
                                                getLieferanten(nachrichten, position + 1);
                                        }
                                    }
                                });
                            }
                        }
                        getLieferanten(rows, 0);

                    }
                }
            });
        },
        //Get all the Messages of Lieferant, joins messages and recipients
        getLieferantenNachrichten: function (lid, callback) {
            if (!callback)
                return;


            dataController.mysqlConnection.query("SELECT * FROM adminlieferantnachricht WHERE (lieferantid = ? AND `read` = 0)", lid, function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {

                    if (rows) {

                        rows = rows.slice(0, dataController.nachricht.maxNachrichten);

                        var getNachrichten = function (nachrichten, position) {

                            if (position == nachrichten.length)
                                callback([]);
                            else {

                                console.log("nachricht " + position + ": " + nachrichten[position].read);
                                if (nachrichten[position].read == 0) {
                                    dataController.mysqlConnection.query('SELECT * FROM adminnachrichtgesendet WHERE id = ?', nachrichten[position].nachrichtenid, function (err, rows, fields) {
                                        if (err)
                                            console.log("MYSQL ERROR: " + err);
                                        else {
                                            if (rows) {
                                                if (rows.length > 0) {
                                                    nachrichten[position].nachricht = rows[0].nachricht;
                                                    nachrichten[position].id = nachrichten[position].nachrichtenid;
                                                    delete  nachrichten[position].nachrichtenid;
                                                    nachrichten[position].lieferanten = nachrichten[position].lieferantid;
                                                    delete  nachrichten[position].lieferantid;
                                                }
                                                if (position == nachrichten.length - 1) {
                                                    callback(nachrichten)
                                                }
                                                else
                                                    getNachrichten(nachrichten, position + 1);
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (position == nachrichten.length - 1) {
                                        callback(nachrichten)
                                    }
                                    else
                                        getNachrichten(nachrichten, position + 1);
                                }
                            }
                        }
                        getNachrichten(rows, 0);

                    }
                }
            });
        }, handleMessage: function (clientController, client, data) {

            var nachricht;

            if (data.t == this.messageType.getAll) {

                var start = data.st || 0;
                var stop = data.sp || dataController.nachricht.maxNachrichten;


                dataController.nachricht.getAllAdminNachrichten(function (nachrichten, length) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: {n: nachrichten, l: length}});

                }, start, stop)
            }
            else if (data.t == this.messageType.get) {

                dataController.nachricht.getLieferantenNachrichten(data.lid, function (nachrichten) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: nachrichten});

                })

            } else if (data.t == this.messageType.create) {

                nachricht = data.n;
                if (nachricht) {

                    var sqlNachricht = JSON.parse(JSON.stringify(nachricht));
                    delete sqlNachricht.lieferanten

                    dataController.mysqlConnection.query('INSERT INTO adminnachrichtgesendet SET ?', sqlNachricht, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            for (var i = 0; i < nachricht.lieferanten.length; i++) {
                                var lieferantId = nachricht.lieferanten[i].lieferantid;
                                var insertData = {lieferantid: lieferantId, nachrichtenid: nachricht.id};
                                dataController.mysqlConnection.query('INSERT INTO adminlieferantnachricht SET ?', insertData, function (err, result) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {

                                        dataController.nachricht.informOtherClients(clientController, client);

                                    }
                                });

                            }

                        }
                    });
                }
            } else if (data.t == this.messageType.markRead) {

                var nachrichtenid = data.nid;
                var lieferantid = data.lid;
                if (nachrichtenid && lieferantid) {
                    var updateData = {read: 1, lieferantid: lieferantid, nachrichtenid: nachrichtenid};
                    dataController.mysqlConnection.query("UPDATE adminlieferantnachricht SET ? WHERE lieferantid = ? AND nachrichtenid = ? ", [updateData, lieferantid, nachrichtenid], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.nachricht.informOtherClients(clientController);
                        }
                    });
                }

            } else if (data.t == this.messageType.delete) {

                nachricht = data.n;
                if (nachricht) {
                    dataController.mysqlConnection.query('DELETE FROM adminnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.mysqlConnection.query('DELETE FROM adminlieferantnachricht WHERE nachrichtenid = ?', nachricht.id, function (err, result) {
                                if (err)
                                    console.log("MYSQL ERROR: " + err);
                                else {

                                    dataController.nachricht.informOtherClients(clientController, client);

                                }
                            });
                        }
                    });
                }


            }
        }, informOtherClients: function (clientController, client) {

            /*
             if (clientController.clients.length > 1) {

             dataController.nachricht.getAllAdminNachrichten(function (nachrichten) {

             var clients = clientController.clients.filter(function (element) {
             return (!client || element.socket != client.socket)
             });

             clients.forEach(function (actClient) {
             actClient.socket.emit('message', {t: dataController.nachricht.messageType.updateOthers, n: nachrichten});
             });

             })


             }
             */
        }

    },
    antwortNachricht: {
        messageType: {
            getAll: "aga",
            create: "ac",
            update: "au",
            delete: "ad",
            updateOthers: "auo"
        },
        maxNachrichten: 1000,
        getAllAdminNachrichten: function (callback, start, stop) {
            if (!callback)
                return;
            dataController.mysqlConnection.query('SELECT * FROM lieferantnachrichtgesendet  ORDER BY datum DESC', function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    if (rows) {
                        var length = rows.length;

                        rows = rows.slice(start, stop);


                        callback(rows, length);
                    }
                }
            });

        },
        handleMessage: function (clientController, client, data) {

            var nachricht;

            if (data.t == this.messageType.getAll) {
                var start = data.st || 0;
                var stop = data.sp || dataController.antwortNachricht.maxNachrichten;

                dataController.antwortNachricht.getAllAdminNachrichten(function (nachrichten, length) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: {n: nachrichten, l: length}});
                }, start, stop);

            } else if (data.t == this.messageType.update) {
                nachricht = data.a;
                if (nachricht) {

                    dataController.mysqlConnection.query("UPDATE lieferantnachrichtgesendet SET ? WHERE id = ? ", [nachricht, nachricht.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(clientController, client);
                        }

                    });
                }
            } else if (data.t == this.messageType.create) {

                nachricht = data.n;
                if (nachricht) {

                    var sqlNachricht = JSON.parse(JSON.stringify(nachricht));
                    delete sqlNachricht.lieferanten

                    dataController.mysqlConnection.query('INSERT INTO lieferantnachrichtgesendet SET ?', sqlNachricht, function (err, result) {
                        if (err) {
                            console.log("MYSQL ERROR: " + err);
                        }
                    });
                }
            } else if (data.t == this.messageType.delete) {


                nachricht = data.a;
                if (nachricht) {
                    dataController.mysqlConnection.query('DELETE FROM lieferantnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(clientController, client);
                        }
                    });
                }


            }
        }, informOtherClients: function (clientController, client) {
            /*
             if (clientController.clients.length > 1) {

             dataController.antwortNachricht.getAllAdminNachrichten(function (nachrichten) {

             var clients = clientController.clients.filter(function (element) {
             return (!client || element.socket != client.socket)
             });

             clients.forEach(function (actClient) {
             actClient.socket.emit('message', {t: dataController.antwortNachricht.messageType.updateOthers, a: nachrichten});
             });

             })
             }
             */
        }
    },
    phone: {
        callCLient: null,
        twilio: null,
        messageType: {
            callNumber: "pcn",
            sendMessage: "psm"

        },
        handleMessage: function (clientController, client, data) {
            if (this.callClient == null || this.callClient == undefined) {
                this.twilio = require('twilio');
                this.callClient = new this.twilio.RestClient('AC511bde017bd79ae7d6dee54060f89dad', '3b9bc40e6bc9735f91939a5cce50e7da');
            }
            if (data.t == this.messageType.sendMessage) {
                console.log("sendMessage");
                console.log(data.n);
                console.log(data.text);
                this.callClient.sms.messages.create({
                        to: data.n,
                        from: data.n,
                        body: data.text
                    }, function (error, message) {
                        if (!error) {
                            console.log('Success! The SID for this SMS message is:');
                            console.log(message.sid);
                            console.log('Message sent on:');
                            console.log(message.dateCreated);
                        } else {
                            console.log('There was an error.');
                        }
                    }
                );
            }
            else if (data.t == this.messageType.callNumber) {

                console.log("makeCall");
                console.log(data.n);
                console.log(data.text);

                this.callClient.makeCall({

                    to: data.n, // Any number Twilio can call
                    from: data.n, // A number you bought from Twilio and can use for outbound communication
                    url: "http://twimlets.com/echo?Twiml=%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3CResponse%3E%3CSay%20voice%3D%22alice%22%20language%3D%22de-DE%22%3E%20" + encodeURI(data.text) + "%20%3C%2FSay%3E%3C%2FResponse%3E&" // A URL that produces an XML document (TwiML) which contains instructions for the call

                }, function (err, responseData) {
                    console.log("call done!");
                    //executed when the call has been initiated.

                    if (err) {
                        console.log(err);
                        console.log('Oops! There was an error.');
                    }
                    //  console.log(responseData.from); // outputs "+14506667788"

                });
            }
        }
    }, job: {
        messageType: {
            getAll: "jga",
            getTemplates: "jt",
            create: "jc",
            update: "ju",
            delete: "jd",
            get: "jg",
            updateOthers: "juo",
            startVisit: "jsv"
        },
        maxJobs: 1000,
        terminTolerance: 2,
        setJobTermin: function (job, list) {
            console.log("setTerminJobCallback:");
            var startNow = new Date();
            var endNow = new Date();

            console.log("start.getHours(): " + startNow.getHours());

            startNow.setHours(startNow.getHours() + dataController.job.terminTolerance);
            endNow.setHours(endNow.getHours() - dataController.job.terminTolerance);

            for (var i = 0; i < list.length; i++) {
                if (list[i].marktId == configData.markt.id) {
                    var terminStart = list[i].start;
                    var terminEnd = list[i].end;
                    if (isNaN(terminEnd) || !terminEnd) {
                        terminEnd = new Date(terminStart);
                        terminEnd.setHours(terminEnd.getHours() + 1);
                    }
                    if (startNow.getTime() > terminStart.getTime() && endNow.getTime() < terminEnd.getTime()) {
                        console.log("serverController.socket.emit('message', new ServerMessage({t: this.messageType.setVisit))");
                        job.termin_id = list[i].id;
                        //serverController.socket.emit('message', new ServerMessage({t: serverController.termin.messageType.setVisit,start:start,end:end,tid:list[i].id ,jid: serverController.termin.setTerminCurrenJob.id}));
                    }
                }

            }
            return job;
        },
        handleMessage: function (clientController, client, data) {
            var job;


            if (data.t == this.messageType.getAll) {


                dataController.mysqlConnection.query('SELECT * FROM jobs ORDER BY timestamp_start DESC', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {
                            rows = rows.slice(0, dataController.job.maxJobs);

                            var jobs = rows;

                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                        }
                    }
                });

            } else if (data.t == this.messageType.startVisit) {

                var job = new Job(data.jid);
                job.timestamp_start = data.start;
                job.lieferanten_id = data.lid;
                job.markt_id = data.mid;
                job.pending = 1;
                dataController.mysqlConnection.query('INSERT INTO jobs SET ?', job, function (err, result) {
                    if (err)
                        console.log("INSERT job ERROR: " + err);
                    else {

                        dataController.job.informOtherClients(clientController, client);


                    }
                });
            }

            else if (data.t == this.messageType.getTemplates) {

                dataController.mysqlConnection.query('SELECT * FROM jobs WHERE lieferanten_id = "' + data.lid + '" AND NOT template_name = ""', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        var jobs = null;
                        if (rows) {
                            jobs = rows;
                        }
                        dataController.mysqlConnection.query('SELECT * FROM jobs WHERE lieferanten_id = "' + data.lid + '" ORDER BY timestamp_start DESC LIMIT 1', function (err, rows, fields) {
                            if (err)
                                console.log("MYSQL ERROR: " + err);
                            else {
                                if (rows && rows.length == 1) {
                                    if (jobs) {
                                        jobs.unshift(rows[0]);
                                    }
                                    else {
                                        jobs = rows;
                                    }
                                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                                }
                                else {
                                    if (jobs) {
                                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                                    }
                                }
                            }
                        });
                    }
                });

            }
            else if (data.t == this.messageType.get) {

                var jobId = data.j;
                dataController.mysqlConnection.query('SELECT * FROM jobs WHERE id = ? ', jobId, function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows && rows.length == 1) {
                            var job = rows[0];
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: job});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                job = data.j;

                if (job) {
                    var newCallback = function (data, termine, job) {
                        job = dataController.job.setJobTermin(job, termine);
                        var termin_id = "";
                        var terminStartMilli = 0;
                        var terminEndMilli = 0;
                        if (job.termin_id && job.termin_id != "") {
                            termin_id = job.termin_id;
                            terminStartMilli = job.timestamp_start;
                            terminEndMilli = job.timestamp_start;
                        }

                        if (termin_id != "") {
                            console.log(termin_id)
                            dataController.mysqlConnection.query('SELECT * FROM termine WHERE id = ? ', termin_id, function (err, rows, fields) {
                                if (err)
                                    console.log("MYSQL ERROR: " + err);
                                else {

                                    if (rows && rows.length == 1) {

                                        var termin = rows[0];
                                        if (termin) {
                                            //Update Single event

                                            if (!termin.RepeatDays || termin.RepeatDays == 0) {
                                                termin.jobId = job.id;
                                                termin.done = 1;
                                                dataController.mysqlConnection.query("UPDATE termine SET ? WHERE id = ? ", [termin, termin.id], function (err, result) {
                                                    if (err)
                                                        console.log("MYSQL ERROR: " + err);
                                                });
                                                //Update Repeating Event

                                            } else {
                                                /*
                                                 termin.StartingMilli = terminEndMilli;
                                                 dataController.mysqlConnection.query("UPDATE termine SET ? WHERE id = ? ", [termin, termin.id], function (err, result) {
                                                 if (err)
                                                 console.log("MYSQL ERROR: " + err);


                                                 });
                                                 */
                                                //Insert new single Event
                                                termin = JSON.parse(JSON.stringify(termin));
                                                termin.done = 1;
                                                termin.StartingMilli = terminStartMilli;
                                                termin.id = dataController.getUniqueID();
                                                termin.repeat_id = termin_id;
                                                job.termin_id = termin.id;
                                                termin.RepeatDays = 0;
                                                termin.jobId = job.id;
                                                termin.StartMilli = terminStartMilli;
                                                termin.Start = dataController.momentJS(termin.StartMilli).zone(termin.Start).format();
                                                if (termin.End) {
                                                    termin.EndMilli = terminEndMilli;
                                                    termin.End = dataController.momentJS(termin.EndMilli).zone(termin.End).format();
                                                }

                                                dataController.mysqlConnection.query('INSERT INTO termine SET ?', termin, function (err, result) {
                                                    if (err)
                                                        console.log("MYSQL ERROR: " + err);
                                                    else {
                                                        dataController.termin.informOtherClients(clientController);

                                                    }
                                                });
                                            }

                                        }
                                    }


                                }
                            });
                        }

                        //Update (Insert Information) Job
                        dataController.mysqlConnection.query("UPDATE jobs SET ? WHERE id = ? ", [job, job.id], function (err, result) {
                            if (err)
                                console.log("MYSQL ERROR: " + err);
                            else {
                                dataController.job.informOtherClients(clientController, client);

                            }

                        });

                    };
                    dataController.termin.getRange(data, newCallback, job);
                }
            } else if (data.t == this.messageType.update) {
                job = data.j;

                if (job) {

                    dataController.mysqlConnection.query("UPDATE jobs SET ? WHERE id = ? ", [job, job.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                job = data.l;
                if (job) {
                    dataController.mysqlConnection.query('DELETE FROM jobs WHERE id = ?', job.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);


                        }
                    });
                }
            }

        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 1) {

                //Send list of all Jobs to ohter clients
                dataController.mysqlConnection.query('SELECT * FROM jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = rows;

                            var clients = clientController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.job.messageType.updateOthers, l: jobs});

                            });

                        }
                    }
                });

            }

        }

    }, maerkte: {
        messageType: {
            getAll: "mga",
            update: "mu"
        },
        handleMessage: function (clientController, client, data) {
            var markt;

            if (data.t == this.messageType.getAll) {

                dataController.mysqlConnection.query('SELECT * FROM maerkte', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var maerkte = rows;

                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: maerkte});
                        }
                    }
                });

            } else if (data.t == this.messageType.update) {
                markt = data.m;
                if (markt) {

                    dataController.mysqlConnection.query("UPDATE maerkte SET ? WHERE id = ? ", [markt, markt.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);

                        }

                    });
                }
            }
        }
    },
    statistics: {
        messageType: {
            get: "sg"
        },
        handleMessage: function (clientController, client, data) {


            if (data.t == this.messageType.get) {

                var statistics = {noData: true};

                //Statistc Methods---------------------

                var countJobs = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM jobs', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.jobs = rows[0].count;

                        callback(statistics)
                    });
                }


                var countBesuche = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM jobs WHERE besuch = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.besuche = rows[0].count;

                        callback(statistics)
                    });
                }

                var countBestellung = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM jobs WHERE bestellung = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.bestellungen = rows[0].count;
                        callback(statistics)
                    });
                }


                var countVerraumung = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM jobs WHERE verraeumung = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.verraeumungen = rows[0].count;
                        callback(statistics)
                    });
                }

                var countAustausch = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM jobs WHERE austausch = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.austausche = rows[0].count;
                        callback(statistics)
                    });
                }


                //Chain Methods

                countJobs(statistics,
                    function (statistics) {
                        countBesuche(statistics,
                            function (statistics) {
                                countBestellung(statistics,
                                    function (statistics) {
                                        countVerraumung(statistics,
                                            function (statistics) {
                                                countAustausch(statistics,
                                                    //Return statistics
                                                    function (statistics) {


                                                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: statistics});
                                                    })
                                            })
                                    })
                            });
                    });

            }
        }
    }



}


module.exports = dataController;